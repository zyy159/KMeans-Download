{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","withCredentials","headers","post","server","App","props","renderInfo","state","activeStep","Typography","className","Card","variant","CardContent","gutterBottom","success","filename","CardActions","accept","id","type","onChange","handleUpload","name","htmlFor","Button","component","color","style","fontSize","disabled","onClick","setState","next","noValidate","autoComplete","TextField","required","label","InputLabelProps","shrink","e","change","defaultValue","FormControl","InputLabel","Select","labelId","MenuItem","value","run","downlaod","handleReset","n_clusters","n_init","max_iter","tol","precompute_distances","algorithm","bind","key","this","target","console","log","data","res1","get","alert","fileDownload","require","then","response","res","event","file","files","fileName","FormData","append","status","AppBar","position","Toolbar","Stepper","alternativeLabel","map","Step","StepLabel","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ea99495.chunk.js","sourcesContent":["import React,{Component} from \"react\";\nimport axios from \"axios\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RedditIcon from \"@material-ui/icons/Reddit\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport \"./App.css\";\n\n\naxios.defaults.withCredentials = true;\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\nconst server = \"http://127.0.0.1:8000\";\n\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            activeStep : 0,\n            n_clusters : 0,\n            n_init : 10,\n            max_iter : 300,\n            tol : 0.0001,\n            precompute_distances: \"auto\",\n            algorithm: \"auto\",\n            success: \"\",\n            filename: \"\",\n        }\n        this.change = this.change.bind(this);\n        this.run = this.run.bind(this);\n        this.downlaod = this.downlaod.bind(this);\n        this.next = this.next.bind(this);\n        this.handleUpload = this.handleUpload.bind(this)\n    }\n\n    change(key,e){\n        this.setState({\n            [key]: e.target.value\n        });\n        console.log(\"ChangeValue \",{...this.state})\n    }\n\n    next(){\n        if (this.state.success == \"【Upload Successfully】\"){\n            this.setState({ activeStep: this.state.activeStep + 1 })\n        }else{\n            this.setState({\n            success: \"【No File Uploaded】\"\n            })\n        }\n    }\n\n    run(){\n        if(this.state.tol != \"\" && this.state.n_clusters != \"\" && this.state.n_clusters != 0 && this.state.n_init != \"\" && this.state.max_iter !=\"\" &&\n        this.state.tol != 0 && this.state.n_init != 0 && this.state.max_iter != 0){\n            this.setState({ activeStep: this.state.activeStep + 1 })\n            let data = {...this.state};\n            console.log(\"data\", data);\n            let res1 = axios.post(server+\"/result/\",data);\n            console.log(\"post\",res1);\n            axios.get(server+\"/result/\");\n        }else if(this.state.tol == \"\" || this.state.tol == 0){\n            alert(\"请填写tol【容忍度】\")\n        }else if(this.state.n_clusters == \"\" || this.state.n_clusters == 0){\n            alert(\"请填写n_clusters【簇的个数】\")\n        }else if(this.state.n_init == \"\" || this.state.n_init == 0){\n            alert(\"请填写n_init【获取初始簇中心的更迭次数】\")\n        }else if(this.state.max_iter == \"\" || this.state.max_iter == 0){\n            alert(\"请填写max_iter【最大迭代次数】\")\n        }\n    }\n\n    downlaod(){\n        var fileDownload = require('react-file-download');\n        axios.get(server+\"/download/\").then((response) => {\n            fileDownload(response.data, 'Data_kmeans_modify.xls');\n        });\n        let res = axios.get(\"${server}/result/\");\n        console.log(res);\n    }\n\n    handleUpload(event) {\n        const file = event.target.files[0]\n        console.log(file)\n        var fileName = file.name\n        this.setState({\n            filename: fileName\n        })\n        var data = new FormData()\n        data.append(\"file\", file)\n        data.append(\"msg\", \"false\")\n        console.log(\"data\",data.get(\"file\"))\n        axios.post(server+\"/upload/\", data, {headers: {\"Content-Type\": \"multipart/form-data\"}}).then((res)=>{\n            if(res.status===200){\n                this.setState({\n                    success: \"【Upload Successfully】\"\n                })\n                console.log(\"Success\",res);\n            }else{\n                this.setState({\n                    success: \"【Upload Fail】\"\n                })\n            }\n        })\n    }\n\n\n    renderInfo = () =>{\n        if(this.state.activeStep===0){\n            return (\n                <div>\n                    <Typography className=\"instructions\">\n                        <Card className=\"SubRoot\" variant=\"outlined\">\n                            <CardContent className=\"Title\">\n                                <Typography variant=\"h4\" gutterBottom >\n                                    File Upload\n                                </Typography>\n                                <Typography className=\"State\">\n                                    {this.state.success} {this.state.filename}\n                                </Typography>\n                            </CardContent>\n                            <CardActions className=\"UploadButton\">\n                                <input\n                                    accept=\"*\"\n                                    id=\"contained-button-file\"\n                                    type=\"file\"\n                                    onChange={this.handleUpload}\n                                    name = \"file\"\n                                    className=\"Input\"\n                                />\n                                <label htmlFor=\"contained-button-file\">\n                                    <Button component=\"span\" > <CloudUploadIcon color=\"primary\" style={{fontSize:150}}/> </Button>\n                                </label>\n                            </CardActions>\n                        </Card>\n                    </Typography>\n                    <div className=\"Buttons\">\n                        <Button disabled onClick={() => this.setState({ activeStep: this.state.activeStep - 1 })} className=\"backButton\" >\n                            Back\n                        </Button>\n                        <Button className=\"ButtonRight\" variant=\"contained\" color=\"primary\" onClick={this.next}>\n                            Next\n                        </Button>\n                    </div>\n                </div>\n            );\n        }else if(this.state.activeStep===1){\n            return (\n                <div>\n                    <Typography className=\"instructions\">\n                        <Card className=\"SubRoot\" variant=\"outlined\">\n                            <CardContent>\n                                <form className=\"MuiTextField\" noValidate autoComplete=\"off\">\n                                    <div className=\"Row\">\n                                        <TextField className=\"TextField\" required label=\"n_clusters【簇的个数】\" InputLabelProps={{shrink: true,}} onChange={(e)=>(this.change(\"n_clusters\",e))} />\n                                        <TextField className=\"Text_Field\" required defaultValue=\"10\" label=\"n_init【获取初始簇中心的更迭次数】\" onChange={(e)=>(this.change(\"n_clusters\",e))} />\n                                    </div>\n                                    <br />\n                                    <div className=\"Row\">\n                                        <TextField className=\"TextField\" required defaultValue=\"300\" label=\"max_iter【最大迭代次数】\" onChange={(e)=>(this.change(\"max_iter\",e))} />\n                                        <TextField className=\"Text_Field\" required defaultValue=\"0.0001\" label=\"tol【容忍度】\" onChange={(e)=>(this.change(\"tol\",e))} />\n                                    </div>\n                                    <br />\n                                    <div className=\"Row\">\n                                        <FormControl className=\"TextField\">\n                                            <InputLabel id=\"precompute_distancesID\">precompute_distances</InputLabel>\n                                            <Select id=\"precompute_distancesID\" labelId=\"precompute_distances【是否提前计算距离】\" defaultValue=\"auto\" onChange={(e)=>(this.change(\"precompute_distances\",e))}>\n                                                <MenuItem value={\"auto\"}>auto</MenuItem>\n                                                <MenuItem value={\"True\"}>True</MenuItem>\n                                                <MenuItem value={\"False\"}>False</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                        <FormControl className=\"Text_Field\">\n                                            <InputLabel id=\"algorithm\">algorithm</InputLabel>\n                                            <Select labelId=\"algorithm【优化算法】\" defaultValue=\"auto\" id=\"algorithm\" onChange={(e)=>(this.change(\"algorithm\",e))}>\n                                                <MenuItem value={\"auto\"}>auto</MenuItem>\n                                                <MenuItem value={\"full\"}>full</MenuItem>\n                                                <MenuItem value={\"elkan\"}>elkan</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </form>\n                            </CardContent>\n                        </Card>\n                    </Typography>\n                    <div className=\"Buttons\">\n                        <Button onClick={() => this.setState({ activeStep: this.state.activeStep - 1 })} className=\"backButton\" >\n                            Back\n                        </Button>\n                        <Button onClick={this.run} className=\"ButtonRight\" variant=\"contained\" color=\"primary\" >\n                            Run\n                        </Button>\n                    </div>\n                </div>\n            );\n        }else if(this.state.activeStep===2){\n            return (\n                <div>\n                    <Typography className=\"instructions\">\n                        <Card className=\"SubRoot\" variant=\"outlined\">\n                            <CardContent className=\"Title\">\n                                <Typography variant=\"h4\" gutterBottom >\n                                    Result Download\n                                </Typography>\n                            </CardContent>\n                            <CardActions className=\"UploadButton\">\n                                <Button component=\"span\" onClick={this.downlaod}> <CloudDownloadIcon color=\"primary\" style={{fontSize:150}}/> </Button>\n                            </CardActions>\n                        </Card>\n                    </Typography>\n                    <div className=\"Buttons\">\n                        <Button onClick={() => this.setState({ activeStep: this.state.activeStep - 1 })} className=\"backButton\" >\n                            Back\n                        </Button>\n                    </div>\n                </div>\n            );\n        }else if(this.state.activeStep===3){\n            return(\n                <div>\n                    <Typography className=\"instructions\">All steps completed</Typography>\n                    <Button className=\"ResetButton\" onClick={this.handleReset}>Reset</Button>\n                </div>\n            );\n        }\n    }\n\n    render(){\n        var Label = [\"Upload Your File\", \"Adjust Parameters\", \"Result\"];\n        return(\n            <div className=\"Root\">\n                <AppBar className=\"AppBar\" position=\"static\">\n                    <Toolbar className=\"Toolbar\" variant=\"dense\">\n                        <RedditIcon className=\"RedditIcon\" style={{ fontSize: 60 }}/>\n                        <Typography variant=\"h4\" color=\"inherit\">\n                            KMeans Download\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Stepper activeStep={this.state.activeStep} alternativeLabel>\n                    {Label.map((label) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                <div>\n                    {this.renderInfo()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}